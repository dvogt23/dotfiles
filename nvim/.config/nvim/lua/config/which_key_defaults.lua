return {
  mode = { "n", "v" },
  [";"] = { ":Alpha<CR>", "Dashboard" },
  ["."] = { ":e $MYVIMRC<CR>", "Dashboard" },
  ["<C-p>"] = { ":Telescope commands<CR>", "Show commands" },
  ["<BS>"] = { "<C-^>", "Last buffer" },
  w = { ":w!<CR>", "Save" },
  W = { ":noa w!<CR>", "Save (no-format)" },
  x = { ":lua print(vim.inspect(vim.api.nvim_list_runtime_paths()))<CR>", "Print runtimepath" },
  q = {
    name = "+Quit",
    q = { ":qa!<CR>", "Quit (all)" },
    w = { ":wqa!<CR>", "Write & quit (all)" },
  },
  j = { ":HopChar1<CR>", "Jump to char" },
  c = { ":bd<CR>", "Close Buffer" },
  h = { ":nohlsearch<CR>", "No Highlight" },
  p = { "<cmd>Telescope treesitter<CR>", "List Symbols" },
  f = { "<cmd>lua require('config.utils').telescope_git_or_file()<CR>", "Find Files" },
  F = { ":ZenMode<CR>", "Focus mode (toggle)" },
  n = {
    name = "+Notes",
    i = { "<cmd>e $NOTES_DIR/SUMMARY.md<CR>cd $NOTES_DIR", "notes index" },
    d = { "<cmd>ObsidianToday<CR>", "Notes daily" },
    f = {
      function()
        require("telescope.builtin").find_files({
          cwd = "$NOTES_DIR",
          prompt_title = "Notes",
          layout_config = { height = 0.85 },
        })
      end,
      "Search notes",
    },
    s = {
      function()
        require("telescope.builtin").live_grep({
          cwd = "$NOTES_DIR",
          prompt_title = "Notes",
          layout_config = { height = 0.85 },
        })
      end,
      "Grep notes",
    },
  },
  r = {
    name = "Replace",
    -- r = { "<cmd>lua require('spectre').open()<cr>", "Replace" },
    w = { "<cmd>lua require('spectre').open_visual({select_word=true})<cr>", "Replace Word" },
    f = { "<cmd>lua require('spectre').open_file_search()<cr>", "Replace Buffer" },
  },
  b = {
    name = "Buffers",
    j = { "<cmd>BufferLinePick<cr>", "Jump" },
    f = { "<cmd>Telescope buffers previewer=false<cr>", "Find" },
    b = { "<cmd>bprevious<cr>", "Previous" },
    n = { "<cmd>bnext<cr>", "Next" },
    D = { "<cmd>CloseHiddenBuffers<CR>", "Close all buffers (hidden)" },
    e = {
      "<cmd>BufferLinePickClose<cr>",
      "Pick which buffer to close",
    },
    p = { "<cmd>BufferLineTogglePin<CR>", "Toggle pin" },
    P = { "<cmd>BufferLineGroupClose ungrouped<CR>", "Delete non-pinned buffers" },
    y = { '<cmd>let @+ = expand("%")<CR>', "Copy relative path to clipboard" },
  },
  g = {
    name = "+Git",
    g = { "<cmd>lua require'neogit'.open({commit})<CR>", "Neogit" },
    a = { "<cmd>lua require'gitsigns'.stage_hunk()<CR>", "Add hunk" },
    -- d = { "<cmd>lua require'gitsigns'.preview_hunk()<CR>", "Preview hunk" },
    j = { "<cmd>lua require 'gitsigns'.next_hunk({navigation_message = false})<cr>", "Next Hunk" },
    k = { "<cmd>lua require 'gitsigns'.prev_hunk({navigation_message = false})<cr>", "Prev Hunk" },
    l = { "<cmd>lua require 'gitsigns'.blame_line()<cr>", "Blame" },
    p = { "<cmd>lua require 'gitsigns'.preview_hunk()<cr>", "Preview Hunk" },
    r = { "<cmd>lua require 'gitsigns'.reset_hunk()<cr>", "Reset Hunk" },
    R = { "<cmd>lua require 'gitsigns'.reset_buffer()<cr>", "Reset Buffer" },
    s = { "<cmd>lua require 'gitsigns'.stage_hunk()<cr>", "Stage Hunk" },
    t = { "<cmd>Telescope git_stash<cr>", "Stage Hunk" },
    u = {
      "<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>",
      "Undo Stage Hunk",
    },
    D = { "<cmd>DiffviewFileHistory %<CR>", "File history" },
    o = { "<cmd>Telescope git_status<cr>", "Open changed file" },
    b = { "<cmd>Telescope git_branches<cr>", "Checkout branch" },
    B = { "<cmd>Git blame<CR>", "Blame File" },
    Y = { "<cmd>lua require 'gitlinker'.get_buf_range_url()<cr>", "Git link" },
    c = {
      name = "+Conflict",
      n = { "<Plug>(git-conflict-next-conflict)", "git conflict next" },
      p = { "<Plug>(git-conflict-prev-conflict)", "git conflict previous" },
      o = { "<Plug>(git-conflict-ours)", "git conflict Pick ours" },
      t = { "<Plug>(git-conflict-theirs)", "git conflict Pick theirs" },
    },
    C = {
      "<cmd>Telescope git_bcommits<cr>",
      "Checkout commit(for current file)",
    },
    d = {
      "<cmd>lua require 'gitsigns'.preview_hunk()<cr>",
      "Git Diff",
    },
  },
  l = {
    name = "+LSP",
    a = { "<cmd>lua vim.lsp.buf.code_action()<cr>", "Code Action" },
    A = { "<cmd>lua vim.lsp.buf.range_code_action()<cr>", "Range Code Actions" },
    d = { "<cmd>lua vim.lsp.buf.definition()<cr>", "Definition" },
    D = { "<cmd>lua vim.lsp.buf.declaration()<cr>", "Declaration" },
    i = { "<cmd>lua vim.lsp.buf.implementation()<cr>", "Implementation" },
    o = { "<cmd>lua vim.lsp.buf.type_definition()<cr>", "Type Definition" },
    R = { "<cmd>Telescope lsp_references<cr>", "References" },
    s = { "<cmd>lua vim.lsp.buf.signature_help()<cr>", "Display Signature Information" },
    r = { "<cmd>lua vim.lsp.buf.rename()<cr>", "Rename all references" },
    f = { "<cmd>lua vim.lsp.buf.format()<cr>", "Format" },
    K = { "<cmd>lua vim.lsp.buf.hover()<cr>", "Hover" },
    l = { "<cmd>TroubleToggle document_diagnostics<cr>", "Document Diagnostics (Trouble)" },
    L = { "<cmd>TroubleToggle workspace_diagnostics<cr>", "Workspace Diagnostics (Trouble)" },
    w = { "<cmd>Telescope diagnostics<cr>", "Diagnostics" },
    t = { [[ <Esc><Cmd>lua require('telescope').extensions.refactoring.refactors()<CR>]], "Refactor" },
    j = { "<cmd>lua vim.lsp.diagnostic.goto_prev()<cr>", "Previous Diagnostic" },
    k = { "<cmd>lua vim.lsp.diagnostic.goto_next()<cr>", "Next Diagnostic" },
    e = { "<cmd>Telescope quickfix<cr>", "Telescope Quickfix" },
  },
  s = {
    name = "+Search",
    f = { "<cmd>Telescope find_files<cr>", "Find File" },
    h = { "<cmd>Telescope help_tags<cr>", "Find Help" },
    H = { "<cmd>Telescope highlights<cr>", "Find highlight groups" },
    M = { "<cmd>Telescope man_pages<cr>", "Man Pages" },
    r = { "<cmd>Telescope oldfiles<cr>", "Open Recent File" },
    R = { "<cmd>Telescope registers<cr>", "Registers" },
    t = { "<cmd>Telescope live_grep<cr>", "Text" },
    k = { "<cmd>Telescope keymaps<cr>", "Keymaps" },
    C = { "<cmd>Telescope commands<cr>", "Commands" },
    l = { "<cmd>Telescope resume<cr>", "Resume last search" },
    c = { "<cmd>Telescope git_commits<cr>", "Git commits" },
    b = { "<cmd>Telescope git_branches<cr>", "Git branches" },
    s = { "<cmd>Telescope git_status<cr>", "Git status" },
    S = { "<cmd>Telescope git_stash<cr>", "Git stash" },
    z = { "<cmd>Telescope zoxide list<cr>", "Zoxide" },
    d = {
      name = "+DAP",
      c = { "<cmd>Telescope dap commands<cr>", "Dap Commands" },
      b = { "<cmd>Telescope dap list_breakpoints<cr>", "Dap Breakpoints" },
      g = { "<cmd>Telescope dap configurations<cr>", "Dap Configurations" },
      v = { "<cmd>Telescope dap variables<cr>", "Dap Variables" },
      f = { "<cmd>Telescope dap frames<cr>", "Dap Frames" },
    },
  },
  T = {
    name = "+Todo",
    t = { "<cmd>TodoTelescope<cr>", "Todo" },
    T = { "<cmd>TodoTelescope keywords=TODO,FIX,FIXME<cr>", "Todo/Fix/Fixme" },
    x = { "<cmd>TodoTrouble<cr>", "Todo (Trouble)" },
    X = { "<cmd>TodoTrouble keywords=TODO,FIX,FIXME<cr><cr>", "Todo/Fix/Fixme (Trouble)" },
  },
  o = {
    g = { ":Gen<CR>", "AI prompts" },
  },
  d = {
    name = "Debug",
    b = { "<cmd>lua require'dap'.toggle_breakpoint()<cr>", "Breakpoint" },
    c = { "<cmd>lua require'dap'.continue()<cr>", "Continue" },
    i = { "<cmd>lua require'dap'.step_into()<cr>", "Into" },
    o = { "<cmd>lua require'dap'.step_over()<cr>", "Over" },
    O = { "<cmd>lua require'dap'.step_out()<cr>", "Out" },
    r = { "<cmd>lua require'dap'.repl.toggle()<cr>", "Repl" },
    l = { "<cmd>lua require'dap'.run_last()<cr>", "Last" },
    u = { "<cmd>lua require'dapui'.toggle()<cr>", "UI" },
    x = { "<cmd>lua require'dap'.terminate()<cr>", "Exit" },
  },
  t = {
    name = "+Tests",
  },
  ["\\"] = {
    name = "+Terminal",
    h = { "<cmd>ToggleTerm direction=horizontal<cr>", "Horizontal" },
    v = { "<cmd>ToggleTerm direction=vertical size=100 <cr>", "Vertical" },
    f = { "<cmd>ToggleTerm direction=float<cr>", "Float" },
  },
}
